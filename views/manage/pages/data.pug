extends ../layout

block content
  .data-analysis
    h2 数据分析
    .analysis-section
      h3 传播路径分析
      .link-selector
        .selector-group
          select#linkSelect
            option(value='') 选择分享链接...
          button#refreshBtn(title='刷新当前视图')
            i.fas.fa-sync-alt
      #treeChart
      #tooltip.tooltip(style='opacity: 0;')

block scripts
  script(src="https://d3js.org/d3.v7.min.js")
  script.
    $(document).ready(function() {
            async function loadLinks() {
        try {
          const res = await fetch('/manage/data/links');
          const links = await res.json();
          const select = $('#linkSelect');
          select.empty().append('<option value="">选择分享链接...</option>');
          links.forEach(link => {
            const displayText = `${link.note} ${link.linkId}` || `链接 ${link.linkId}`;             select.append(`<option value="${link.linkId}">${displayText}</option>`);
          });
        } catch (err) {
          console.error('加载链接失败:', err);
        }
      }
      
            function drawTree(data) {
        const container = document.getElementById('treeChart');
        const width = container.clientWidth;
        const height = container.clientHeight;
      
        d3.select('#treeChart').html('');
      
        const svg = d3.select('#treeChart')
          .append('svg')
          .attr('width', '100%')
          .attr('height', '100%')
          .attr('viewBox', `0 0 ${width} ${height}`);
      
        const g = svg.append('g');
      
        const zoom = d3.zoom()
          .scaleExtent([0.1, 3])
          .on('zoom', (event) => {
            g.attr('transform', event.transform);
          });
      
        svg.call(zoom);
      
        const tree = d3.tree()
          .size([height, width - 160])
          .nodeSize([50, 200]);       
        const root = d3.hierarchy(data);
        tree(root);
      
        g.selectAll('.link')
          .data(root.links())
          .enter()
          .append('path')
          .attr('class', 'link')
          .attr('d', d3.linkHorizontal()
            .x(d => d.y)
            .y(d => d.x));
      
        const node = g.selectAll('.node')
          .data(root.descendants())
          .enter()
          .append('g')
          .attr('class', 'node')
          .attr('transform', d => `translate(${d.y},${d.x})`);
      
        node.append('circle')
          .attr('r', 10)
          .style('fill', d => {
            const colors = ['#0D47A1', '#1976D2', '#42A5F5', '#90CAF9', '#E3F2FD'];
            return colors[d.depth] || colors[colors.length - 1];
          })
          .style('stroke', '#0D1B53')
          .on('mouseover', function(event, d) {
            const tooltip = d3.select('#tooltip');
            const mouseX = event.clientX;
            const mouseY = event.clientY;
      
            tooltip.transition()
              .duration(200)
              .style('opacity', .9);
      
            tooltip.html(`
              IP地址: ${d.data.ipAddress}<br/>
              浏览器: ${d.data.browserInfo}<br/>
              访问时间: ${new Date(d.data.time).toLocaleString()}
            `)
              .style('left', `${mouseX + 10}px`)
              .style('top', `${mouseY - 28}px`);
          })
          .on('mouseout', function() {
            d3.select('#tooltip')
              .transition()
              .duration(500)
              .style('opacity', 0);
          });
      
        node.append('text')
          .attr('dy', '.35em')
          .attr('x', d => d.children ? -13 : 13)
          .attr('text-anchor', d => d.children ? 'end' : 'start')
          .style('font-size', '12px')
          .text(d => d.data.name);
      
        const initialTransform = d3.zoomIdentity
          .translate(40, height / 2)
          .scale(0.8);
        svg.call(zoom.transform, initialTransform);
      
        const resizeObserver = new ResizeObserver(entries => {
          for (let entry of entries) {
            const newWidth = entry.contentRect.width;
            const newHeight = entry.contentRect.height;
      
            tree.size([newHeight, newWidth - 160]);
      
            tree(root);
      
            g.selectAll('.link')
              .attr('d', d3.linkHorizontal()
                .x(d => d.y)
                .y(d => d.x));
      
            g.selectAll('.node')
              .attr('transform', d => `translate(${d.y},${d.x})`);
          }
        });
      
        resizeObserver.observe(container);
      }
      
            $('#linkSelect').on('change', async function() {
        const linkId = $(this).val();
        if (linkId) {
          try {
            const res = await fetch(`/manage/data/tree/${linkId}`);
            const data = await res.json();
            drawTree(data);
          } catch (err) {
            console.error('获取数据失败:', err);
          }
        }
      });
      
            $('#refreshBtn').on('click', async function() {
        const linkId = $('#linkSelect').val();
        if (linkId) {
          try {
            const res = await fetch(`/manage/data/tree/${linkId}`);
            const data = await res.json();
            drawTree(data);
          } catch (err) {
            console.error('刷新数据失败:', err);
          }
        }
      });
      
            loadLinks();
    });