extends ../layout

block content
  .file-header
    .back-btn
      a.btn.btn-back(href="/manage/tasks")
        i.fas.fa-arrow-left
        span 返回
    h2 文件管理 - #{page.title}
  .file-manager
    .editor-section(style="display: none;")
      .editor-header
        button#closeEditor.btn
          i.fas.fa-times
          span 关闭
        button#saveFile.btn
          i.fas.fa-save 
          span 保存
      #monaco-editor(style="width: 100%; height: 600px;")
    .upload-section
      h3 上传文件
      .upload-area
        .upload-buttons
          label.upload-btn.files-btn(for="fileInput")
            i.fas.fa-file-upload
            span 选择文件
          label.upload-btn.folder-btn(for="folderInput")
            i.fas.fa-folder-plus
            span 选择文件夹
        .upload-tips 或将文件拖放到此处
        form#uploadForm(enctype="multipart/form-data")
          input#fileInput(type="file" multiple hidden)
          input#folderInput(type="file" webkitdirectory directory multiple hidden)
          .progress(style="display: none;")
            .progress-bar(role="progressbar")
            .progress-text 0%

    .files-section
      h3 文件列表
      table.files-table
        thead
          tr
            th 文件名
            th 大小
            th 修改时间
            th 操作
        tbody#filesList

block pageScripts
  script.
    const pageId = '#{pageId}';
    const userId = '#{userId}';

    $(document).ready(function() {
      const uploadArea = $('.upload-area');
      
      uploadArea.on('dragover', function(e) {
        e.preventDefault();
        $(this).addClass('dragover');
      });
      
      uploadArea.on('dragleave', function(e) {
        e.preventDefault();
        $(this).removeClass('dragover');
      });
      
      uploadArea.on('drop', function(e) {
        e.preventDefault();
        $(this).removeClass('dragover');
        const items = e.originalEvent.dataTransfer.items;
        handleFiles(items);
      });
      
      $('#fileInput, #folderInput').change(function() {
        handleFiles(this.files);
      });
      
      function handleFiles(files) {
        const formData = new FormData();
        for(let i = 0; i < files.length; i++) {
          formData.append('files', files[i]);
        }
        
        uploadFiles(formData);
      }
      
      function uploadFiles(formData) {
        $.ajax({
          url: `/manage/tasks/files/${pageId}/upload`,
          type: 'POST',
          data: formData,
          processData: false,
          contentType: false,
          xhr: function() {
            const xhr = new window.XMLHttpRequest();
            xhr.upload.addEventListener('progress', function(e) {
              if (e.lengthComputable) {
                const percent = Math.round((e.loaded / e.total) * 100);
                $('.progress').show();
                $('.progress-bar').width(percent + '%');
                $('.progress-text').text(percent + '%');
              }
            });
            return xhr;
          },
          success: function(response) {
            if(response.success) {
              loadFiles();
              $('#fileInput, #folderInput').val('');
              $('.progress').hide();
            }
          },
          error: function(xhr) {
            const errorMsg = xhr.responseJSON?.error || '上传失败';
            Modal.alert(errorMsg);
            $('.progress').hide();
          }
        });
      }

      // 初始化 Monaco Editor
      require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.36.1/min/vs' }});
      require(['vs/editor/editor.main'], function() {
        let editor = null;

        // 创建编辑器实例
        function createEditor() {
          editor = monaco.editor.create(document.getElementById('monaco-editor'), {
            value: '',
            language: 'plaintext',
            theme: 'vs-dark',
            automaticLayout: true
          });
        }

        // 显示编辑器
        window.openFileInEditor = async function(filename) {
          try {
            const response = await fetch(`/manage/tasks/files/${pageId}/content/${filename}`);
            const content = await response.text();
            
            if (!editor) {
              createEditor();
            }

            // 根据文件扩展名设置语言
            const ext = filename.split('.').pop().toLowerCase();
            const langMap = {
              'js': 'javascript',
              'py': 'python',
              'html': 'html',
              'css': 'css',
              'json': 'json',
              // 添加更多语言映射
            };
            
            editor.setModel(monaco.editor.createModel(content, langMap[ext] || 'plaintext'));
            $('.editor-section').show();
            
            // 保存当前编辑的文件名
            editor.currentFile = filename;
          } catch (err) {
            Modal.alert('读取文件失败');
          }
        };

        // 保存文件
        $('#saveFile').click(async function() {
          if (!editor || !editor.currentFile) return;

          try {
            const content = editor.getValue();
            const response = await fetch(`/manage/tasks/files/${pageId}/save/${editor.currentFile}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ content })
            });

            if (response.ok) {
              Modal.alert('保存成功');
              loadFiles();
            } else {
              Modal.alert('保存失败');
            }
          } catch (err) {
            Modal.alert('保存失败');
          }
        });

        // 关闭编辑器
        $('#closeEditor').click(function() {
          $('.editor-section').hide();
        });
      });

      // 修改文件列表渲染代码,添加编辑按钮
      function loadFiles() {
        $.get(`/manage/tasks/files/${pageId}/list`, function(files) {
          const tbody = $('#filesList');
          tbody.empty();
          
          files.forEach(file => {
            const tr = $('<tr>');
            tr.append(`<td>${file.name}</td>`);
            tr.append(`<td>${formatSize(file.size)}</td>`);
            tr.append(`<td>${new Date(file.mtime).toLocaleString()}</td>`);
            tr.append(`
              <td class="actions">
                <button onclick="openFileInEditor('${file.name}')">编辑</button> |
                <button onclick="deleteFile('${file.name}')">删除</button>
              </td>
            `);
            tbody.append(tr);
          });
        });
      }

      function formatSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }

      window.deleteFile = async function(filename) {
        const confirmed = await Modal.confirm('确定要删除此文件吗');
        if (confirmed) {
          $.ajax({
            url: `/manage/tasks/files/${pageId}/delete`,
            type: 'POST',
            data: { filename },
            success: function() {
              loadFiles();
            },
            error: function() {
              Modal.alert('删除失败');
            }
          });
        }
      }

      loadFiles();
    });